//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Copy, Clone, Default, Debug, DeriveEntity)]
pub struct Entity;

impl EntityName for Entity {
    fn table_name(&self) -> &str {
        "_prisma_migrations"
    }
}

#[derive(Clone, Debug, PartialEq, DeriveModel, DeriveActiveModel)]
pub struct Model {
    pub id: String,
    pub checksum: String,
    pub finished_at: Option<DateTimeWithTimeZone>,
    pub migration_name: String,
    pub logs: Option<String>,
    pub rolled_back_at: Option<DateTimeWithTimeZone>,
    pub started_at: DateTimeWithTimeZone,
    pub applied_steps_count: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveColumn)]
pub enum Column {
    Id,
    Checksum,
    FinishedAt,
    MigrationName,
    Logs,
    RolledBackAt,
    StartedAt,
    AppliedStepsCount,
}

#[derive(Copy, Clone, Debug, EnumIter, DerivePrimaryKey)]
pub enum PrimaryKey {
    Id,
}

impl PrimaryKeyTrait for PrimaryKey {
    type ValueType = String;
    fn auto_increment() -> bool {
        false
    }
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {}

impl ColumnTrait for Column {
    type EntityName = Entity;
    fn def(&self) -> ColumnDef {
        match self {
            Self::Id => ColumnType::String(Some(36u32)).def(),
            Self::Checksum => ColumnType::String(Some(64u32)).def(),
            Self::FinishedAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::MigrationName => ColumnType::String(Some(255u32)).def(),
            Self::Logs => ColumnType::Text.def().null(),
            Self::RolledBackAt => ColumnType::TimestampWithTimeZone.def().null(),
            Self::StartedAt => ColumnType::TimestampWithTimeZone.def(),
            Self::AppliedStepsCount => ColumnType::Integer.def(),
        }
    }
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        panic!("No RelationDef")
    }
}

impl ActiveModelBehavior for ActiveModel {}
